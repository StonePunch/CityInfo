// <auto-generated />
using CityInfo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CityInfo.Data.Migrations
{
    [DbContext(typeof(CityInfoContext))]
    partial class CityInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CityInfo.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, Description = "Big Apple", Name = "New York City" },
                        new { Id = 2, Description = "Has a cathedral that was never finished", Name = "Antwerp" },
                        new { Id = 3, Description = "Avecs", Name = "Paris" }
                    );
                });

            modelBuilder.Entity("CityInfo.Data.Entities.PointOfInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("PointsOfInterest");

                    b.HasData(
                        new { Id = 1, CityId = 1, Description = "Phantom of the Opera is recommended", Name = "Broadway" },
                        new { Id = 2, CityId = 1, Description = "Crossroads of the City", Name = "Times Square" },
                        new { Id = 3, CityId = 1, Description = "Some greenery in the contrete jungle", Name = "Central Park" },
                        new { Id = 4, CityId = 2, Description = "Was supposed to have two towers, not just one", Name = "Cathedral of Our Lady" },
                        new { Id = 5, CityId = 3, Description = "Was originaly only supposed to be a temporary building", Name = "Eiffel Tower" },
                        new { Id = 6, CityId = 3, Description = "How is God going to protect you, if he can't even protect his own house", Name = "Notre Dame" }
                    );
                });

            modelBuilder.Entity("CityInfo.Data.Entities.PointOfInterest", b =>
                {
                    b.HasOne("CityInfo.Data.Entities.City", "City")
                        .WithMany("PointsOfInterest")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
